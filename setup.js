#!/usr/bin/env node

/**
 * DeCodify Agent Setup Script
 * Automates environment configuration and secret generation
 */

import fs from 'fs-extra';
import crypto from 'crypto';
import path from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function colorize(text, color) {
  return `${colors[color]}${text}${colors.reset}`;
}

function log(message, color = 'reset') {
  console.log(colorize(message, color));
}

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(colorize(prompt, 'cyan'), resolve);
  });
}

// Environment templates
const serverEnvTemplate = `# ================================
# DeCodify Agent - Server Environment Configuration
# ================================
# Generated by setup script on ${new Date().toISOString()}

# ================================
# REQUIRED VARIABLES
# ================================
OPENAI_API_KEY={{OPENAI_API_KEY}}
MONGODB_URI={{MONGODB_URI}}
JWT_SECRET={{JWT_SECRET}}
SESSION_SECRET={{SESSION_SECRET}}

# ================================
# SERVER CONFIGURATION
# ================================
NODE_ENV={{NODE_ENV}}
PORT={{PORT}}
HOST={{HOST}}

# ================================
# OPENAI CONFIGURATION
# ================================
OPENAI_MODEL={{OPENAI_MODEL}}
OPENAI_EMBEDDING_MODEL={{OPENAI_EMBEDDING_MODEL}}
OPENAI_MAX_TOKENS={{OPENAI_MAX_TOKENS}}
OPENAI_TEMPERATURE={{OPENAI_TEMPERATURE}}

# ================================
# SECURITY
# ================================
BCRYPT_ROUNDS={{BCRYPT_ROUNDS}}

# ================================
# RATE LIMITING
# ================================
RATE_LIMIT_WINDOW_MS={{RATE_LIMIT_WINDOW_MS}}
RATE_LIMIT_MAX_REQUESTS={{RATE_LIMIT_MAX_REQUESTS}}

# ================================
# FILE UPLOAD
# ================================
MAX_FILE_SIZE={{MAX_FILE_SIZE}}
MAX_FILES_IN_ZIP={{MAX_FILES_IN_ZIP}}
ALLOWED_EXTENSIONS={{ALLOWED_EXTENSIONS}}

# ================================
# CORS
# ================================
CLIENT_URL={{CLIENT_URL}}
ALLOWED_ORIGINS={{ALLOWED_ORIGINS}}

# ================================
# ANALYSIS
# ================================
MAX_LINES_PER_FILE={{MAX_LINES_PER_FILE}}
MAX_FILES_TO_PROCESS={{MAX_FILES_TO_PROCESS}}
COMPLEXITY_WARNING_THRESHOLD={{COMPLEXITY_WARNING_THRESHOLD}}
COMPLEXITY_ERROR_THRESHOLD={{COMPLEXITY_ERROR_THRESHOLD}}

# ================================
# VECTOR STORE
# ================================
EMBEDDING_CHUNK_SIZE={{EMBEDDING_CHUNK_SIZE}}
EMBEDDING_CHUNK_OVERLAP={{EMBEDDING_CHUNK_OVERLAP}}
MAX_RETRIEVAL_DOCS={{MAX_RETRIEVAL_DOCS}}
SIMILARITY_THRESHOLD={{SIMILARITY_THRESHOLD}}

# ================================
# OPTIONAL VARIABLES
# ================================
{{GITHUB_TOKEN_LINE}}
LOG_LEVEL={{LOG_LEVEL}}
ERROR_LOG_PATH={{ERROR_LOG_PATH}}
ACCESS_LOG_PATH={{ACCESS_LOG_PATH}}
CACHE_TTL={{CACHE_TTL}}
DEBUG={{DEBUG}}
HOT_RELOAD={{HOT_RELOAD}}
API_TIMEOUT={{API_TIMEOUT}}
`;

const clientEnvTemplate = `# ================================
# DeCodify Agent - Client Environment Configuration
# ================================
# Generated by setup script on ${new Date().toISOString()}

# ================================
# API CONFIGURATION
# ================================
VITE_API_BASE_URL={{VITE_API_BASE_URL}}
VITE_WS_URL={{VITE_WS_URL}}

# ================================
# APPLICATION INFO
# ================================
VITE_APP_TITLE={{VITE_APP_TITLE}}
VITE_APP_DESCRIPTION={{VITE_APP_DESCRIPTION}}
VITE_APP_VERSION={{VITE_APP_VERSION}}

# ================================
# FEATURE FLAGS
# ================================
VITE_ENABLE_GITHUB_INTEGRATION={{VITE_ENABLE_GITHUB_INTEGRATION}}
VITE_ENABLE_REAL_TIME_COLLABORATION={{VITE_ENABLE_REAL_TIME_COLLABORATION}}
VITE_ENABLE_ADVANCED_ANALYTICS={{VITE_ENABLE_ADVANCED_ANALYTICS}}
VITE_ENABLE_EXPORT_FEATURES={{VITE_ENABLE_EXPORT_FEATURES}}

# ================================
# UI CONFIGURATION
# ================================
VITE_DEFAULT_THEME={{VITE_DEFAULT_THEME}}
VITE_ENABLE_DARK_MODE={{VITE_ENABLE_DARK_MODE}}
VITE_MAX_DIAGRAM_NODES={{VITE_MAX_DIAGRAM_NODES}}
VITE_DEFAULT_DIAGRAM_TYPE={{VITE_DEFAULT_DIAGRAM_TYPE}}

# ================================
# FILE UPLOAD
# ================================
VITE_MAX_FILE_SIZE_MB={{VITE_MAX_FILE_SIZE_MB}}
VITE_ALLOWED_FILE_TYPES={{VITE_ALLOWED_FILE_TYPES}}

# ================================
# DEVELOPMENT
# ================================
VITE_DEBUG_MODE={{VITE_DEBUG_MODE}}
VITE_ENABLE_DEV_TOOLS={{VITE_ENABLE_DEV_TOOLS}}
VITE_MOCK_API={{VITE_MOCK_API}}

# ================================
# EXTERNAL SERVICES
# ================================
VITE_MERMAID_THEME={{VITE_MERMAID_THEME}}
VITE_MERMAID_MAX_TEXT_SIZE={{VITE_MERMAID_MAX_TEXT_SIZE}}
VITE_MONACO_THEME={{VITE_MONACO_THEME}}
VITE_MONACO_FONT_SIZE={{VITE_MONACO_FONT_SIZE}}
`;

// Default values
const defaults = {
  server: {
    NODE_ENV: 'development',
    PORT: '5000',
    HOST: 'localhost',
    OPENAI_MODEL: 'gpt-4',
    OPENAI_EMBEDDING_MODEL: 'text-embedding-ada-002',
    OPENAI_MAX_TOKENS: '2000',
    OPENAI_TEMPERATURE: '0.1',
    BCRYPT_ROUNDS: '12',
    RATE_LIMIT_WINDOW_MS: '900000',
    RATE_LIMIT_MAX_REQUESTS: '100',
    MAX_FILE_SIZE: '52428800',
    MAX_FILES_IN_ZIP: '1000',
    ALLOWED_EXTENSIONS: '.js,.jsx,.ts,.tsx,.html,.css,.vue,.json,.md,.txt',
    CLIENT_URL: 'http://localhost:3000',
    ALLOWED_ORIGINS: 'http://localhost:3000,http://127.0.0.1:3000',
    MAX_LINES_PER_FILE: '10000',
    MAX_FILES_TO_PROCESS: '500',
    COMPLEXITY_WARNING_THRESHOLD: '10',
    COMPLEXITY_ERROR_THRESHOLD: '20',
    EMBEDDING_CHUNK_SIZE: '1000',
    EMBEDDING_CHUNK_OVERLAP: '200',
    MAX_RETRIEVAL_DOCS: '5',
    SIMILARITY_THRESHOLD: '0.7',
    LOG_LEVEL: 'info',
    ERROR_LOG_PATH: './logs/error.log',
    ACCESS_LOG_PATH: './logs/access.log',
    CACHE_TTL: '3600',
    DEBUG: 'decodify:*',
    HOT_RELOAD: 'true',
    API_TIMEOUT: '30000'
  },
  client: {
    VITE_API_BASE_URL: 'http://localhost:5000/api',
    VITE_WS_URL: 'ws://localhost:5000',
    VITE_APP_TITLE: 'DeCodify Agent',
    VITE_APP_DESCRIPTION: 'AI-powered frontend codebase explainer',
    VITE_APP_VERSION: '1.0.0',
    VITE_ENABLE_GITHUB_INTEGRATION: 'true',
    VITE_ENABLE_REAL_TIME_COLLABORATION: 'false',
    VITE_ENABLE_ADVANCED_ANALYTICS: 'true',
    VITE_ENABLE_EXPORT_FEATURES: 'true',
    VITE_DEFAULT_THEME: 'light',
    VITE_ENABLE_DARK_MODE: 'true',
    VITE_MAX_DIAGRAM_NODES: '100',
    VITE_DEFAULT_DIAGRAM_TYPE: 'dependency',
    VITE_MAX_FILE_SIZE_MB: '50',
    VITE_ALLOWED_FILE_TYPES: '.js,.jsx,.ts,.tsx,.html,.css,.vue,.json',
    VITE_DEBUG_MODE: 'true',
    VITE_ENABLE_DEV_TOOLS: 'true',
    VITE_MOCK_API: 'false',
    VITE_MERMAID_THEME: 'default',
    VITE_MERMAID_MAX_TEXT_SIZE: '50000',
    VITE_MONACO_THEME: 'vs-dark',
    VITE_MONACO_FONT_SIZE: '14'
  }
};

function generateSecret(length = 32) {
  return crypto.randomBytes(length).toString('hex');
}

async function main() {
  log('\nüöÄ DeCodify Agent Environment Setup', 'bright');
  log('=====================================\n', 'bright');

  // Check if .env files already exist
  const serverEnvExists = await fs.pathExists(path.join(__dirname, 'server', '.env'));
  const clientEnvExists = await fs.pathExists(path.join(__dirname, 'client', '.env'));

  if (serverEnvExists || clientEnvExists) {
    log('‚ö†Ô∏è  Environment files already exist:', 'yellow');
    if (serverEnvExists) log('   - server/.env', 'yellow');
    if (clientEnvExists) log('   - client/.env', 'yellow');
    
    const overwrite = await question('\nOverwrite existing files? (y/N): ');
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      log('\n‚úÖ Setup cancelled. Existing files preserved.', 'green');
      rl.close();
      return;
    }
  }

  log('Setting up environment configuration...\n', 'cyan');

  // Gather required information
  const config = {};

  // OpenAI API Key
  config.OPENAI_API_KEY = await question('Enter your OpenAI API Key (sk-...): ');
  if (!config.OPENAI_API_KEY || !config.OPENAI_API_KEY.startsWith('sk-')) {
    log('\n‚ùå Invalid OpenAI API Key. Please get one from: https://platform.openai.com/api-keys', 'red');
    rl.close();
    return;
  }

  // MongoDB URI
  const useLocal = await question('\nUse local MongoDB? (Y/n): ');
  if (useLocal.toLowerCase() === 'n' || useLocal.toLowerCase() === 'no') {
    config.MONGODB_URI = await question('Enter MongoDB Atlas connection string: ');
  } else {
    config.MONGODB_URI = 'mongodb://localhost:27017/decodify_agent';
  }

  // GitHub Token (optional)
  const useGithub = await question('\nEnable GitHub integration? (y/N): ');
  if (useGithub.toLowerCase() === 'y' || useGithub.toLowerCase() === 'yes') {
    config.GITHUB_TOKEN = await question('Enter GitHub Personal Access Token (optional): ');
  }

  // Generate secrets
  log('\nüîê Generating security secrets...', 'cyan');
  config.JWT_SECRET = generateSecret(32);
  config.SESSION_SECRET = generateSecret(32);

  log('‚úÖ JWT Secret generated', 'green');
  log('‚úÖ Session Secret generated', 'green');

  // Environment selection
  const isProd = await question('\nIs this for production? (y/N): ');
  const isProduction = isProd.toLowerCase() === 'y' || isProd.toLowerCase() === 'yes';

  // Create server .env
  log('\nüìù Creating server/.env...', 'cyan');
  
  let serverConfig = { ...defaults.server, ...config };
  if (isProduction) {
    serverConfig.NODE_ENV = 'production';
    serverConfig.HOST = '0.0.0.0';
    serverConfig.DEBUG = '';
    serverConfig.HOT_RELOAD = 'false';
  }

  let serverEnv = serverEnvTemplate;
  for (const [key, value] of Object.entries(serverConfig)) {
    serverEnv = serverEnv.replace(new RegExp(`{{${key}}}`, 'g'), value);
  }

  // Handle GitHub token
  if (config.GITHUB_TOKEN) {
    serverEnv = serverEnv.replace('{{GITHUB_TOKEN_LINE}}', `GITHUB_TOKEN=${config.GITHUB_TOKEN}`);
  } else {
    serverEnv = serverEnv.replace('{{GITHUB_TOKEN_LINE}}', '# GITHUB_TOKEN=your-github-token-here');
  }

  await fs.ensureDir(path.join(__dirname, 'server'));
  await fs.writeFile(path.join(__dirname, 'server', '.env'), serverEnv);
  log('‚úÖ server/.env created', 'green');

  // Create client .env
  log('üìù Creating client/.env...', 'cyan');
  
  let clientConfig = { ...defaults.client };
  if (isProduction) {
    clientConfig.VITE_DEBUG_MODE = 'false';
    clientConfig.VITE_ENABLE_DEV_TOOLS = 'false';
    clientConfig.VITE_API_BASE_URL = await question('Enter production API URL (https://api.your-domain.com): ');
  }

  let clientEnv = clientEnvTemplate;
  for (const [key, value] of Object.entries(clientConfig)) {
    clientEnv = clientEnv.replace(new RegExp(`{{${key}}}`, 'g'), value);
  }

  await fs.ensureDir(path.join(__dirname, 'client'));
  await fs.writeFile(path.join(__dirname, 'client', '.env'), clientEnv);
  log('‚úÖ client/.env created', 'green');

  // Create logs directory
  await fs.ensureDir(path.join(__dirname, 'server', 'logs'));
  log('‚úÖ logs directory created', 'green');

  // Summary
  log('\nüéâ Environment setup complete!', 'bright');
  log('================================', 'bright');
  log('\nFiles created:', 'cyan');
  log('  ‚úÖ server/.env', 'green');
  log('  ‚úÖ client/.env', 'green');
  log('  ‚úÖ server/logs/ directory', 'green');

  log('\nNext steps:', 'cyan');
  log('  1. Install dependencies: npm run install:all', 'yellow');
  log('  2. Start development: npm run dev', 'yellow');
  log('  3. Visit: http://localhost:3000', 'yellow');

  if (!useLocal || isProduction) {
    log('\nReminder:', 'cyan');
    if (!useLocal) {
      log('  - Ensure MongoDB Atlas cluster is accessible', 'yellow');
    }
    if (isProduction) {
      log('  - Update production URLs and secrets as needed', 'yellow');
      log('  - Configure your deployment environment', 'yellow');
    }
  }

  log('\nüìñ See ENVIRONMENT_SETUP.md for detailed configuration options.', 'cyan');
  log('\nüöÄ Ready to start coding!', 'bright');

  rl.close();
}

// Error handling
process.on('SIGINT', () => {
  log('\n\n‚ùå Setup cancelled by user.', 'red');
  rl.close();
  process.exit(0);
});

main().catch((error) => {
  log('\n‚ùå Setup failed:', 'red');
  console.error(error);
  rl.close();
  process.exit(1);
}); 